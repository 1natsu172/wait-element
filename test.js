import test from 'ava';
import delay from 'delay';
import jsdom from 'jsdom';
import m from '.';

const dom = new jsdom.JSDOM();
global.window = dom.window;
global.document = dom.window.document;

require('mutationobserver-shim');

global.MutationObserver = window.MutationObserver;

test('Detect the appearance of an element by id-selector', async t => {
	delay(500).then(() => {
		const el = document.createElement('div');
		el.id = 'late';
		document.body.append(el);
	});

	const checkEl = await m('#late');
	t.is(checkEl.id, 'late');
});

test('Detect the appearance of an element by class-selector', async t => {
	delay(500).then(() => {
		const el = document.createElement('div');
		el.className = 'late-comming';
		document.body.append(el);
	});

	const checkEl = await m('.late-comming');
	t.is(checkEl.className, 'late-comming');
});

test('Check when an element already exists', async t => {
	const el = document.createElement('div');
	el.id = 'exist';
	document.body.append(el);

	const checkEl = await m('#exist');
	t.is(checkEl.id, 'exist');
});

test('Detect elements of the same selector on each parent target', async t => {
	const target1 = document.createElement('p');
	document.body.append(target1);
	const target2 = document.createElement('span');
	document.body.append(target2);

	delay(500).then(() => {
		const el1 = document.createElement('p');
		el1.id = 'late1';
		el1.className = 'late-comming';
		target1.append(el1);

		const el2 = document.createElement('span');
		el2.id = 'late2';
		el2.className = 'late-comming';
		target2.append(el2);
	});

	const checkEl1 = await m('.late-comming', {target: target1});
	t.is(checkEl1.id, 'late1');

	const checkEl2 = await m('.late-comming', {target: target2});
	t.is(checkEl2.id, 'late2');
});

test('Detect if an element can be found within the time limit', async t => {
	delay(500).then(() => {
		const el = document.createElement('div');
		el.id = 'late';
		document.body.append(el);
	});

	const checkEl = await m('#late', {timeout: 800});
	t.is(checkEl.id, 'late');
});

test.serial(
	'Timeout if an element is not found within specified time',
	async t => {
		const waitingEl = '#late';
		const timeoutEl = await t.throwsAsync(m(waitingEl, {timeout: 500}));

		await delay(800)
			.then(() => {
				const el = document.createElement('div');
				el.id = 'late';
				document.body.append(el);
			})
			.then(() => {
				t.is(timeoutEl.message, `Element was not found: ${waitingEl}`);
			});
	}
);

test.serial('Check cancelable', async t => {
	const checkEl = m('#find');

	await delay(300);
	checkEl.cancel();

	await delay(300).then(() => {
		const el = document.createElement('div');
		el.id = 'late';
		document.body.append(el);
	});

	await t.throwsAsync(checkEl);
	t.true(checkEl.isCanceled);
});

test('Determine `promise` and `canceled-promise` generated by the same selector are different', async t => {
	const checkEl1 = m('.unit1');

	checkEl1.cancel();

	const checkEl2 = m('.unit2');

	await t.throwsAsync(checkEl1);
	t.not(checkEl1, checkEl2);
});
