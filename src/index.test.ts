import test from 'ava'
import delay from 'delay'
import jsdom from 'jsdom'
import {waitElement} from './index'

const {JSDOM} = jsdom
const dom = new JSDOM()

// @ts-expect-error
global.window = dom.window
global.document = dom.window.document

require('mutationobserver-shim')

global.MutationObserver = window.MutationObserver

test('Detect the appearance of an element by id-selector', async (t) => {
	delay(500).then(() => {
		const element = document.createElement('div')
		element.id = 'late'
		document.body.append(element)
	})

	const checkElement = await waitElement('#late')
	t.is(checkElement.id, 'late')
})

test('Detect the appearance of an element by class-selector', async (t) => {
	delay(500).then(() => {
		const element = document.createElement('div')
		element.className = 'late-comming'
		document.body.append(element)
	})

	const checkElement = await waitElement('.late-comming')
	t.is(checkElement.className, 'late-comming')
})

test('Check when an element already exists', async (t) => {
	const element = document.createElement('div')
	element.id = 'exist'
	document.body.append(element)

	const checkElement = await waitElement('#exist')
	t.is(checkElement.id, 'exist')
})

test('Detect the target element by delayed add class name', async (t) => {
	const element = document.createElement('div')
	element.id = 'exist'
	document.body.append(element)
	const notDetectYet = document.querySelector('#exist.added')
	t.is(notDetectYet, null)

	element.classList.add('added')
	const checkElement = await waitElement('#exist.added')
	t.is(checkElement.id, 'exist')
})

test('Detect elements of the same selector on each parent target', async (t) => {
	const target1 = document.createElement('p')
	document.body.append(target1)
	const target2 = document.createElement('span')
	document.body.append(target2)

	delay(500).then(() => {
		const element1 = document.createElement('p')
		element1.id = 'late1'
		element1.className = 'late-comming'
		target1.append(element1)

		const element2 = document.createElement('span')
		element2.id = 'late2'
		element2.className = 'late-comming'
		target2.append(element2)
	})

	const checkElement1 = await waitElement('.late-comming', {target: target1})
	t.is(checkElement1.id, 'late1')

	const checkElement2 = await waitElement('.late-comming', {target: target2})
	t.is(checkElement2.id, 'late2')
})

test('Detect if an element can be found within the time limit', async (t) => {
	delay(500).then(() => {
		const element = document.createElement('div')
		element.id = 'late'
		document.body.append(element)
	})

	const checkElement = await waitElement('#late', {timeout: 800})
	t.is(checkElement.id, 'late')
})

test.serial(
	'Timeout if an element is not found within specified time',
	async (t) => {
		const waitingElement = '#late'
		const timeoutElement = await t.throwsAsync(
			waitElement(waitingElement, {timeout: 500}),
		)

		await delay(800)
			.then(() => {
				const element = document.createElement('div')
				element.id = 'late'
				document.body.append(element)
			})
			.then(() => {
				t.is(timeoutElement.message, `Element was not found: ${waitingElement}`)
			})
	},
)

test.serial('Check cancelable', async (t) => {
	const checkElement = waitElement('#find')

	await delay(300)
	checkElement.cancel()

	await delay(300).then(() => {
		const element = document.createElement('div')
		element.id = 'late'
		document.body.append(element)
	})

	await t.throwsAsync(checkElement)
	t.true(checkElement.isCanceled)
})

test('Determine `promise` and `canceled-promise` generated by the same selector are different', async (t) => {
	const checkElement1 = waitElement('.unit1')

	checkElement1.cancel()

	const checkElement2 = waitElement('.unit2')

	await t.throwsAsync(checkElement1)
	t.not(checkElement1, checkElement2)
})
